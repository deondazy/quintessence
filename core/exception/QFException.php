<?php

namespace QF\Core\Exception;

class QFException extends \Exception
{
    protected $message = '';
    protected $isError = false;

    public function __construct($message = 'QF_Error', $code = 0, $isError = false)
    {
        parent::__construct($message, $code);

        $this->isError = $isError;
    }

    public static function handle()
    {
        set_exception_handler([__CLASS__, 'exceptionHandler']);
        set_error_handler([__CLASS__, 'errorHandler']);
    }

    public static function exceptionHandler($exception)
    {
        if (isset($exception->isError) && $exception->isError) {
            return null;
        }

        //print $exception->getMessage();
    }

    public static function errorHandler($errno, $errstr, $errfile, $errline, $errcontext)
    {
        if (!($errno & error_reporting())) {
            return;
        }

        // Don't be fooled, we can't actually handle most of these.
        $error_names = [
            // A fatal PHP error at runtime. Code execution is stopped
            E_ERROR             => 'Error',
            // A non-fatal PHP error at runtime. Code execution is not stopped
            E_WARNING           => 'Warning',
            // A fatal PHP error generated while parsing the PHP
            E_PARSE             => 'Parse Error',
            // PHP encountered something at runtime that could be an error or intended
            E_NOTICE            => 'Notice',
            // A fatal PHP error during PHP startup. Code execution is stopped.
            E_CORE_ERROR        => 'Core Error',
            // A non-fatal PHP during PHP startup. Code execution is not stopped.
            E_CORE_WARNING      => 'Core Warning',
            // A fatal PHP error at runtime. Code execution is stopped.
            E_COMPILE_ERROR     => 'Compile Error',
            // A non-fatal PHP error at runtime. Code execution is not stopped.
            E_COMPILE_WARNING   => 'Compile Warning',
            // A fatal error generated by CFXP. Code execution is stopped.
            E_USER_ERROR        => 'User Error',
            // A non-fatal error generated by CFXP. Code execution is not stopped.
            E_USER_WARNING      => 'User Warning',
            // PHP encountered something generated by CFXP at runtime that could be an error or intended
            E_USER_NOTICE       => 'User Notice',
            // A suggestion from PHP that the code may need updated for interoperability or forward compatibility
            E_STRICT            => 'Strict Notice',
            // A fatal PHP error at runtime. An error handler may be able to work around it. If not, code execution stops.
            E_RECOVERABLE_ERROR => 'Recoverable Error',
        ];

        if (version_compare(PHP_VERSION, QF_PHP, '>=')) {
            // A notification from PHP that the code is outdated and may not work in the future
            $error_names[E_DEPRECATED] = 'Deprecated violation';
            // A notification that the code is outdated and CFXP may not work with it in the future
            $error_names[E_USER_DEPRECATED] = 'User deprecated violation';
        }

        if (ini_get('display_errors')) {
            printf(
                "<pre class=\"alert alert-danger\">\n<b>%s:</b> %s in %s line %s\n</pre>",
                $error_names[$errno],
                $errstr,
                $errfile,
                $errline
            );
        }
        return true;
    }
}
